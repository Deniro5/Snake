{"version":3,"sources":["components/GameInfo.js","components/Intro.js","components/Board.js","components/Home.js","components/App.js","index.js"],"names":["GameInfo","props","react_default","a","createElement","className","score","Intro","style","fontSize","marginTop","lineHeight","onClick","start","Board","_useState","useState","_useState2","Object","slicedToArray","setScore","_useState3","_useState4","snake","setSnake","_useState5","_useState6","direction","setDirection","_useState7","_useState8","setStart","_useState9","_useState10","inter","setInter","_useState11","_useState12","food","setFood","window","onkeydown","e","keyCode","clearTimeout","useEffect","speed","setTimeout","move","alert","count","length","oldSnake","toConsumableArray","oldx","oldy","unshift","colIndex","Math","floor","random","rowIndex","pop","console","log","components_GameInfo","map","square","background","top","left","components_Intro","Home","components_Board","App","components_Home","Component","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.88755fe1.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst GameInfo = props => {\n\n  return (\n    <div className = \"gameInfoContainer\">\n        <div className = \"infoDiv\">\n          <p>Score</p>\n          <p>{props.score}</p> \n        </div>\n    </div>\n    );\n  }\n\n\nexport default GameInfo;\n","import React from 'react';\n\nconst Intro = props => {\n\n  return (\n    <div className=\"introContainer\">\n      <h2> Snake </h2>\n      <p> How to Play: </p>\n      <p style = {{fontSize:\"12px\", marginTop: \"20px\", lineHeight: \"20px\"}}> Move the snake with the arrow keys. Eat as much food as possible without colliding with the walls or yourself! </p>\n      <button onClick = {props.start}> Start Game</button>\n    </div>\n  );\n}\n\n\nexport default Intro;\n\n\n","import React, {useState, useEffect} from 'react';\nimport GameInfo from './GameInfo';\nimport Intro from './Intro';\n\nconst Board = () => {\n\n  const [score, setScore] = useState(0)\n  const [snake, setSnake] = useState([])\n  const [direction, setDirection] = useState(\"right\");\n  const [start, setStart] = useState(false)\n  const [inter, setInter] = useState(null)\n  const [food, setFood] = useState([])\n\n  window.onkeydown = (e) => {\n   if (e.keyCode === 37 && direction !== \"left\" && direction !== \"right\") {       // left arrow\n      setInter(null);\n      clearTimeout(inter);\n      setDirection(\"left\")\n   }\n   else if (e.keyCode === 38 && direction !== \"up\" && direction !== \"down\") {     // up arrow\n      setInter(null);\n      clearTimeout(inter);\n      setDirection(\"up\")\n    }\n   else if (e.keyCode === 39 && direction !== \"right\" && direction !== \"left\") {       // right arrow\n      setInter(null);\n      clearTimeout(inter);\n      setDirection(\"right\")\n   }\n   else if (e.keyCode === 40 && direction !== \"up\" && direction !== \"down\") {     // down arrow\n      setInter(null);\n      clearTimeout(inter);\n      setDirection(\"down\")\n  }\n  }\n\n  useEffect (() => {\n    if (start && inter === null) {\n      let speed = 500 - (8*score);  \n      if (speed < 100) {\n        speed = 50;    // maximum speed\n      }\n      const inter = setTimeout(move, speed)\n      setInter(inter);\n    }\n  }, [snake, start])\n\n  useEffect (() => {\n    if (start && inter === null) {\n       move();    //want to move as soon as user wants to\n    }\n  }, [direction])\n\n  useEffect(() => {\n    if (start) {\n      if (snake[0][1] < 0 || snake[0][1] > 29 || snake[0][0] < 0 || snake[0][0] > 29) {  //user hits wall\n        alert(\"Game Over\")\n        setStart(false);\n      }\n      else {\n        let count = 1;\n        while (count < snake.length) {\n          if (snake[0][0] === snake[count][0] && snake[0][1] === snake[count][1]) {  //user hits itself \n            alert(\"Game Over\")\n            setStart(false);\n          }\n          count++;\n        }\n      }\n      \n  }\n  }, [snake])\n\n  const move = () => {\n    let oldSnake = [...snake]\n    const oldx = oldSnake[0][0]\n    const oldy = oldSnake[0][1]\n    if (direction === \"up\") {\n      oldSnake.unshift([oldx, oldy - 1])\n    }\n    else if (direction === \"down\") {\n      oldSnake.unshift([oldx, oldy + 1])\n    }\n    else if (direction === \"left\") {\n      oldSnake.unshift([oldx - 1, oldy])\n    }\n    else if (direction === \"right\") {\n      oldSnake.unshift([oldx + 1, oldy])\n    } \n    if (oldSnake[0][0] === food[0] && oldSnake[0][1] === food[1]) { // user got a point\n      const colIndex = Math.floor(Math.random() * 29); \n      const rowIndex = Math.floor(Math.random() * 29);  \n      setScore(score + 1);\n      setFood([rowIndex,colIndex])\n    }   \n    else {   //if the user didnt get a point, remove last piece of the snake\n      oldSnake.pop();\n    } \n    console.log(oldSnake)\n    setInter(null);\n    setSnake(oldSnake);\n  }\n\n  const startGame = () => {\n    setFood ([15,7])\n    setSnake([[10,10]])\n    setStart(true);\n    setScore(0)\n  }\n\n  if (!start) {\n    return (\n      <div className = \"boardContainer\">\n        <Intro start = {() => {startGame()}}/>\n        <GameInfo score = {score}/>\n      </div>\n      );\n  }\n  return (\n    <div className = \"boardContainer\">\n      <GameInfo score = {score}/>\n      {snake.map((square) => (\n        <div className = \"snake\" style = {{background: \"white\", top: square[1] * 10 + \"px\", left: square[0] * 10 + \"px\"}}/>\n      ))}\n      <div className = \"point\" style = {{background: \"yellow\", top: food[1] * 10 + \"px\", left: food[0] * 10 + \"px\"}} />\n    </div>\n    );\n  }\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board';\n\nconst Home = props => {\n\n  return (\n    <div className=\"homeContainer\">\n      <Board/>\n    </div>\n  );\n}\n\n\nexport default Home;\n\n\n","import React, { Component } from 'react';\nimport Home from './Home'\nimport '../scss/app.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app-container\">\n        <Home/>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}